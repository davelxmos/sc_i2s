-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "I2S Audio Driver"
componentFullName = ""
alternativeNames = { }
componentDescription = "I2S Driver component for audio input and output" 
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints =
{
  numChansDAC =
  {
    short   = "DAC Channels",
    long    = "Number of DAC Audio Channels (output)",
    units   = "",
    type    = "int",
    resourceUsageFlags = {"orthogonal"},
    define = "I2S_MASTER_NUM_CHANS_DAC",
    min     = 1,
    max     = 8,
    default = 2
  },
  numChansADC =
  {
    short   = "ADC Channels",
    long    = "Number of ADC Audio Channels (input)",
    units   = "",
    type    = "int",
    resourceUsageFlags = {"orthogonal"},
    define = "I2S_MASTER_NUM_CHANS_ADC",
    min     = 1,
    max     = 8,
    default = 2
  },
  masterClockFreq = 
  {
    short   = "MCLK Frequency",
    long    = "I2S Master Clock Frequency
    units   = "Hz",
    type    = "int",
    resourceUsageFlags = {"orthogonal"},
    min = FIXME,
    max = FIXME,
    default = FIXME
  },
  sampFreq = 
  {
    short   = "Initial Audio Sample Frequency"
    long    = "",
    help    = "Set the desired Audio Sample Frequency",
    units   = "Hz",
    type    = "int",
    resourceUsageFlags = {"orthogonal"},
    min     = FIXME,
    max     = FIXME,
    default = FIXME 
  }
}

derivedValues = {  
  mclk_blk_ratio = {
    short = "mclk/bclk ratio",
    long = "Ratio of master clock to bit clock",
    help = "",
    units = "",
    type = "int",
    value = params.masterClockFreq / 
  }
}

ports = {
  p_i2s_mck = {
    short   = "I2S MCLK",
    long    = "I2S Master Clock Input",
    help    = "",
    width   = 1
  },
  p_i2s_bck = {
    short   = "I2S BCLK",
    long    = "I2S Bit Clock Output",
    help    = "",
    width   = 1
  },
  p_i2s_mck = {
    short   = "I2S WCLK",
    long    = "I2S Word Clock Output",
    help    = "",
    width   = 1
  },
  p_i2s_din = {
    short   = "I2S DIN",
    long    = "I2S ADC Data In",
    arraySize = "I2S_MASTER_NUM_CHANS_ADC" 
    help    = "",
    width   = 1
  },
  p_i2s_dout = {
    short   = "I2S DOUT",
    long    = "I2S DAC Data Out",
    arraySize = "I2S_MASTER_NUM_CHANS_DAC" 
    help    = "",
    width   = 1
  }
}

channels = {
  c_i2s_data = {
    short = "I2S Client Data Channel",
    long  = "Channel for the client to send and receive I2S data with the I2S driver component"
    help  = "",
  },
}        

function getConfigStatus()
  local status = "Valid Configuration"
  local issues = {}
  if swblock.params.sampFreq > FIXME and (swblock.params.numchansDAC + swblock.params.numchansADC) > FIXME then
    status = "Invalid Configuration"
    table.insert(issues, { issues = "The requested number of channels at this sample frequency cannot be supported", suggestion = "For most simple applications this can be left as zero"}) 
  elsif swblock.params.sampFreq > FIXME and (swblock.params.numchansDAC + swblock.params.numchansADC) > FIXME then
    status = "Valid Configuration"
    table.insert(issues, { issues = "The requested number of channels at this sample frequency may not work since this configuration has not yet been tested", suggestion = "For most simple applications this can be left as zero"}) 
  else 
    status = "Trusted Configuration"    
  end
  
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
  includes = { 
    "app_global.h",
    "i2c.h",
    "xa_sk_audio_1v0.h",
  },
  globals = [[
    r_i2s i2s${swblock.id}_resources = { 
      ${swblock.clocks[0]}, 
      ${swblock.clocks[1]}, 
      ${swblock.ports.p_i2s_mck},
      ${swblock.ports.p_i2s_bck},
      ${swblock.ports.p_i2s_wck},
      ${swblock.ports.p_i2s_mck},
      ${swblock.ports.p_i2s_din},
      ${swblock.ports.p_i2s_dout}
    };
  ]],
  body = [[
    {
       unsignden mlk_blk_div = get_mclk_bclk_div(${swblock.params.sampFreq}, ${swblock.params.masterClockFreq});
       i2s_master(r_i2s, ${swblock.chanends.c_i2s_data}, mlk_blk_div);
    }
  ]]
}

